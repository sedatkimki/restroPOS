/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface BearerToken
 */
export interface BearerToken {
    /**
     * 
     * @type {string}
     * @memberof BearerToken
     */
    'accessToken': string;
    /**
     * 
     * @type {string}
     * @memberof BearerToken
     */
    'tokenType': string;
}
/**
 * 
 * @export
 * @interface CategoryDto
 */
export interface CategoryDto {
    /**
     * 
     * @type {number}
     * @memberof CategoryDto
     */
    'id'?: number;
    /**
     * 
     * @type {WorkspaceDto}
     * @memberof CategoryDto
     */
    'workspace'?: WorkspaceDto;
    /**
     * 
     * @type {ImageDto}
     * @memberof CategoryDto
     */
    'image'?: ImageDto;
    /**
     * 
     * @type {string}
     * @memberof CategoryDto
     */
    'categoryTitle'?: string;
}
/**
 * 
 * @export
 * @interface CreateRequest
 */
export interface CreateRequest {
    /**
     * 
     * @type {File}
     * @memberof CreateRequest
     */
    'file': File;
}
/**
 * 
 * @export
 * @interface CustomerDto
 */
export interface CustomerDto {
    /**
     * 
     * @type {string}
     * @memberof CustomerDto
     */
    'firstName': string;
    /**
     * 
     * @type {string}
     * @memberof CustomerDto
     */
    'lastName': string;
    /**
     * 
     * @type {ImageDto}
     * @memberof CustomerDto
     */
    'imageDto'?: ImageDto;
    /**
     * 
     * @type {string}
     * @memberof CustomerDto
     */
    'phoneNumber': string;
}
/**
 * 
 * @export
 * @interface EnableToken
 */
export interface EnableToken {
    /**
     * 
     * @type {string}
     * @memberof EnableToken
     */
    'tokenCode': string;
    /**
     * 
     * @type {string}
     * @memberof EnableToken
     */
    'accountInformation': string;
}
/**
 * 
 * @export
 * @interface FeaturedGroupsDto
 */
export interface FeaturedGroupsDto {
    /**
     * 
     * @type {string}
     * @memberof FeaturedGroupsDto
     */
    'groupName'?: string;
    /**
     * 
     * @type {WorkspaceDto}
     * @memberof FeaturedGroupsDto
     */
    'workspaceDto'?: WorkspaceDto;
    /**
     * 
     * @type {Array<ProductDto>}
     * @memberof FeaturedGroupsDto
     */
    'products'?: Array<ProductDto>;
}
/**
 * 
 * @export
 * @interface ImageDto
 */
export interface ImageDto {
    /**
     * 
     * @type {string}
     * @memberof ImageDto
     */
    'imageName'?: string;
    /**
     * 
     * @type {string}
     * @memberof ImageDto
     */
    'folderName'?: ImageDtoFolderNameEnum;
    /**
     * 
     * @type {string}
     * @memberof ImageDto
     */
    'link'?: string;
}

export const ImageDtoFolderNameEnum = {
    BusinessLogo: 'BUSINESS_LOGO',
    Products: 'PRODUCTS',
    Customers: 'CUSTOMERS',
    Categories: 'CATEGORIES',
    Tables: 'TABLES'
} as const;

export type ImageDtoFolderNameEnum = typeof ImageDtoFolderNameEnum[keyof typeof ImageDtoFolderNameEnum];

/**
 * 
 * @export
 * @interface LoginDto
 */
export interface LoginDto {
    /**
     * 
     * @type {string}
     * @memberof LoginDto
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof LoginDto
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface ProductDto
 */
export interface ProductDto {
    /**
     * 
     * @type {string}
     * @memberof ProductDto
     */
    'productName'?: string;
    /**
     * 
     * @type {WorkspaceDto}
     * @memberof ProductDto
     */
    'workspace'?: WorkspaceDto;
    /**
     * 
     * @type {Array<ProductModifierDto>}
     * @memberof ProductDto
     */
    'productModifiers'?: Array<ProductModifierDto>;
    /**
     * 
     * @type {string}
     * @memberof ProductDto
     */
    'productDescription'?: string;
    /**
     * 
     * @type {ImageDto}
     * @memberof ProductDto
     */
    'image'?: ImageDto;
    /**
     * 
     * @type {number}
     * @memberof ProductDto
     */
    'price'?: number;
    /**
     * 
     * @type {string}
     * @memberof ProductDto
     */
    'categoryTitle'?: string;
}
/**
 * 
 * @export
 * @interface ProductModifierDto
 */
export interface ProductModifierDto {
    /**
     * 
     * @type {number}
     * @memberof ProductModifierDto
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ProductModifierDto
     */
    'productModifierName'?: string;
    /**
     * 
     * @type {Array<ProductSubmodifierDto>}
     * @memberof ProductModifierDto
     */
    'productSubmodifierSet'?: Array<ProductSubmodifierDto>;
    /**
     * 
     * @type {boolean}
     * @memberof ProductModifierDto
     */
    'isRequired'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ProductModifierDto
     */
    'choice'?: string;
}
/**
 * 
 * @export
 * @interface ProductSubmodifierDto
 */
export interface ProductSubmodifierDto {
    /**
     * 
     * @type {number}
     * @memberof ProductSubmodifierDto
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ProductSubmodifierDto
     */
    'productSubmodifierName'?: string;
    /**
     * 
     * @type {number}
     * @memberof ProductSubmodifierDto
     */
    'price'?: number;
}
/**
 * 
 * @export
 * @interface RawEmailTemplate
 */
export interface RawEmailTemplate {
    /**
     * 
     * @type {string}
     * @memberof RawEmailTemplate
     */
    'templateName'?: RawEmailTemplateTemplateNameEnum;
    /**
     * 
     * @type {string}
     * @memberof RawEmailTemplate
     */
    'templateContent'?: string;
}

export const RawEmailTemplateTemplateNameEnum = {
    WorkspaceVerifyTemplate: 'WORKSPACE_VERIFY_TEMPLATE'
} as const;

export type RawEmailTemplateTemplateNameEnum = typeof RawEmailTemplateTemplateNameEnum[keyof typeof RawEmailTemplateTemplateNameEnum];

/**
 * 
 * @export
 * @interface ResponseMessage
 */
export interface ResponseMessage {
    /**
     * 
     * @type {string}
     * @memberof ResponseMessage
     */
    'status'?: ResponseMessageStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof ResponseMessage
     */
    'message'?: string;
}

export const ResponseMessageStatusEnum = {
    _100Continue: '100 CONTINUE',
    _101SwitchingProtocols: '101 SWITCHING_PROTOCOLS',
    _102Processing: '102 PROCESSING',
    _103EarlyHints: '103 EARLY_HINTS',
    _103Checkpoint: '103 CHECKPOINT',
    _200Ok: '200 OK',
    _201Created: '201 CREATED',
    _202Accepted: '202 ACCEPTED',
    _203NonAuthoritativeInformation: '203 NON_AUTHORITATIVE_INFORMATION',
    _204NoContent: '204 NO_CONTENT',
    _205ResetContent: '205 RESET_CONTENT',
    _206PartialContent: '206 PARTIAL_CONTENT',
    _207MultiStatus: '207 MULTI_STATUS',
    _208AlreadyReported: '208 ALREADY_REPORTED',
    _226ImUsed: '226 IM_USED',
    _300MultipleChoices: '300 MULTIPLE_CHOICES',
    _301MovedPermanently: '301 MOVED_PERMANENTLY',
    _302Found: '302 FOUND',
    _302MovedTemporarily: '302 MOVED_TEMPORARILY',
    _303SeeOther: '303 SEE_OTHER',
    _304NotModified: '304 NOT_MODIFIED',
    _305UseProxy: '305 USE_PROXY',
    _307TemporaryRedirect: '307 TEMPORARY_REDIRECT',
    _308PermanentRedirect: '308 PERMANENT_REDIRECT',
    _400BadRequest: '400 BAD_REQUEST',
    _401Unauthorized: '401 UNAUTHORIZED',
    _402PaymentRequired: '402 PAYMENT_REQUIRED',
    _403Forbidden: '403 FORBIDDEN',
    _404NotFound: '404 NOT_FOUND',
    _405MethodNotAllowed: '405 METHOD_NOT_ALLOWED',
    _406NotAcceptable: '406 NOT_ACCEPTABLE',
    _407ProxyAuthenticationRequired: '407 PROXY_AUTHENTICATION_REQUIRED',
    _408RequestTimeout: '408 REQUEST_TIMEOUT',
    _409Conflict: '409 CONFLICT',
    _410Gone: '410 GONE',
    _411LengthRequired: '411 LENGTH_REQUIRED',
    _412PreconditionFailed: '412 PRECONDITION_FAILED',
    _413PayloadTooLarge: '413 PAYLOAD_TOO_LARGE',
    _413RequestEntityTooLarge: '413 REQUEST_ENTITY_TOO_LARGE',
    _414UriTooLong: '414 URI_TOO_LONG',
    _414RequestUriTooLong: '414 REQUEST_URI_TOO_LONG',
    _415UnsupportedMediaType: '415 UNSUPPORTED_MEDIA_TYPE',
    _416RequestedRangeNotSatisfiable: '416 REQUESTED_RANGE_NOT_SATISFIABLE',
    _417ExpectationFailed: '417 EXPECTATION_FAILED',
    _418IAmATeapot: '418 I_AM_A_TEAPOT',
    _419InsufficientSpaceOnResource: '419 INSUFFICIENT_SPACE_ON_RESOURCE',
    _420MethodFailure: '420 METHOD_FAILURE',
    _421DestinationLocked: '421 DESTINATION_LOCKED',
    _422UnprocessableEntity: '422 UNPROCESSABLE_ENTITY',
    _423Locked: '423 LOCKED',
    _424FailedDependency: '424 FAILED_DEPENDENCY',
    _425TooEarly: '425 TOO_EARLY',
    _426UpgradeRequired: '426 UPGRADE_REQUIRED',
    _428PreconditionRequired: '428 PRECONDITION_REQUIRED',
    _429TooManyRequests: '429 TOO_MANY_REQUESTS',
    _431RequestHeaderFieldsTooLarge: '431 REQUEST_HEADER_FIELDS_TOO_LARGE',
    _451UnavailableForLegalReasons: '451 UNAVAILABLE_FOR_LEGAL_REASONS',
    _500InternalServerError: '500 INTERNAL_SERVER_ERROR',
    _501NotImplemented: '501 NOT_IMPLEMENTED',
    _502BadGateway: '502 BAD_GATEWAY',
    _503ServiceUnavailable: '503 SERVICE_UNAVAILABLE',
    _504GatewayTimeout: '504 GATEWAY_TIMEOUT',
    _505HttpVersionNotSupported: '505 HTTP_VERSION_NOT_SUPPORTED',
    _506VariantAlsoNegotiates: '506 VARIANT_ALSO_NEGOTIATES',
    _507InsufficientStorage: '507 INSUFFICIENT_STORAGE',
    _508LoopDetected: '508 LOOP_DETECTED',
    _509BandwidthLimitExceeded: '509 BANDWIDTH_LIMIT_EXCEEDED',
    _510NotExtended: '510 NOT_EXTENDED',
    _511NetworkAuthenticationRequired: '511 NETWORK_AUTHENTICATION_REQUIRED'
} as const;

export type ResponseMessageStatusEnum = typeof ResponseMessageStatusEnum[keyof typeof ResponseMessageStatusEnum];

/**
 * 
 * @export
 * @interface SystemUserDto
 */
export interface SystemUserDto {
    /**
     * 
     * @type {string}
     * @memberof SystemUserDto
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof SystemUserDto
     */
    'password': string;
    /**
     * 
     * @type {string}
     * @memberof SystemUserDto
     */
    'role': string;
    /**
     * 
     * @type {string}
     * @memberof SystemUserDto
     */
    'firstName': string;
    /**
     * 
     * @type {string}
     * @memberof SystemUserDto
     */
    'lastName': string;
    /**
     * 
     * @type {WorkspaceDto}
     * @memberof SystemUserDto
     */
    'workspaceDto'?: WorkspaceDto;
}
/**
 * 
 * @export
 * @interface SystemUserDtoResponse
 */
export interface SystemUserDtoResponse {
    /**
     * 
     * @type {number}
     * @memberof SystemUserDtoResponse
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof SystemUserDtoResponse
     */
    'firstName'?: string;
    /**
     * 
     * @type {string}
     * @memberof SystemUserDtoResponse
     */
    'lastName'?: string;
    /**
     * 
     * @type {WorkspaceDto}
     * @memberof SystemUserDtoResponse
     */
    'workspaceDto'?: WorkspaceDto;
    /**
     * 
     * @type {string}
     * @memberof SystemUserDtoResponse
     */
    'role'?: string;
    /**
     * 
     * @type {string}
     * @memberof SystemUserDtoResponse
     */
    'email'?: string;
}
/**
 * 
 * @export
 * @interface WorkspaceDto
 */
export interface WorkspaceDto {
    /**
     * 
     * @type {string}
     * @memberof WorkspaceDto
     */
    'businessName': string;
    /**
     * 
     * @type {string}
     * @memberof WorkspaceDto
     */
    'businessDomain': string;
    /**
     * 
     * @type {ImageDto}
     * @memberof WorkspaceDto
     */
    'imageDto'?: ImageDto;
}
/**
 * 
 * @export
 * @interface WorkspaceTableDto
 */
export interface WorkspaceTableDto {
    /**
     * 
     * @type {string}
     * @memberof WorkspaceTableDto
     */
    'tableName'?: string;
    /**
     * 
     * @type {WorkspaceDto}
     * @memberof WorkspaceTableDto
     */
    'workspaceDto'?: WorkspaceDto;
    /**
     * 
     * @type {ImageDto}
     * @memberof WorkspaceTableDto
     */
    'imageDto'?: ImageDto;
}

/**
 * AuthApiApi - axios parameter creator
 * @export
 */
export const AuthApiApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} phoneNumber 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerValid: async (phoneNumber: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'phoneNumber' is not null or undefined
            assertParamExists('customerValid', 'phoneNumber', phoneNumber)
            const localVarPath = `/auth/customer/valid`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (phoneNumber !== undefined) {
                localVarQueryParameter['phoneNumber'] = phoneNumber;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {EnableToken} enableToken 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        enableAccountWithToken: async (enableToken: EnableToken, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'enableToken' is not null or undefined
            assertParamExists('enableAccountWithToken', 'enableToken', enableToken)
            const localVarPath = `/auth/account/enable`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(enableToken, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {LoginDto} loginDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginForEmail: async (loginDto: LoginDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'loginDto' is not null or undefined
            assertParamExists('loginForEmail', 'loginDto', loginDto)
            const localVarPath = `/auth/login/email`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {EnableToken} enableToken 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginForPhoneNumber: async (enableToken: EnableToken, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'enableToken' is not null or undefined
            assertParamExists('loginForPhoneNumber', 'enableToken', enableToken)
            const localVarPath = `/auth/login/phoneNumber`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(enableToken, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} customerDto 
         * @param {File} image 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerNewCustomer: async (customerDto: string, image: File, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerDto' is not null or undefined
            assertParamExists('registerNewCustomer', 'customerDto', customerDto)
            // verify required parameter 'image' is not null or undefined
            assertParamExists('registerNewCustomer', 'image', image)
            const localVarPath = `/auth`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (customerDto !== undefined) { 
                localVarFormParams.append('customerDto', customerDto as any);
            }
    
            if (image !== undefined) { 
                localVarFormParams.append('image', image as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} registerInformations 
         * @param {File} image 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerNewWorkspace: async (registerInformations: string, image: File, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'registerInformations' is not null or undefined
            assertParamExists('registerNewWorkspace', 'registerInformations', registerInformations)
            // verify required parameter 'image' is not null or undefined
            assertParamExists('registerNewWorkspace', 'image', image)
            const localVarPath = `/auth/workspace/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (registerInformations !== undefined) { 
                localVarFormParams.append('registerInformations', registerInformations as any);
            }
    
            if (image !== undefined) { 
                localVarFormParams.append('image', image as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} phoneNumber 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendOtp: async (phoneNumber: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'phoneNumber' is not null or undefined
            assertParamExists('sendOtp', 'phoneNumber', phoneNumber)
            const localVarPath = `/auth/sendVerifySms`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (phoneNumber !== undefined) {
                localVarQueryParameter['phoneNumber'] = phoneNumber;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} email 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendVerifyEmailToAdmin: async (email: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            assertParamExists('sendVerifyEmailToAdmin', 'email', email)
            const localVarPath = `/auth/sendVerifyEmail`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} businessDomain 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workspaceExist: async (businessDomain: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'businessDomain' is not null or undefined
            assertParamExists('workspaceExist', 'businessDomain', businessDomain)
            const localVarPath = `/auth/workspace/exists`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (businessDomain !== undefined) {
                localVarQueryParameter['businessDomain'] = businessDomain;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} businessDomain 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workspaceValid: async (businessDomain: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'businessDomain' is not null or undefined
            assertParamExists('workspaceValid', 'businessDomain', businessDomain)
            const localVarPath = `/auth/workspace/valid`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (businessDomain !== undefined) {
                localVarQueryParameter['businessDomain'] = businessDomain;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApiApi - functional programming interface
 * @export
 */
export const AuthApiApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} phoneNumber 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerValid(phoneNumber: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerValid(phoneNumber, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApiApi.customerValid']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {EnableToken} enableToken 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async enableAccountWithToken(enableToken: EnableToken, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseMessage>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.enableAccountWithToken(enableToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApiApi.enableAccountWithToken']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {LoginDto} loginDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loginForEmail(loginDto: LoginDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BearerToken>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.loginForEmail(loginDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApiApi.loginForEmail']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {EnableToken} enableToken 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loginForPhoneNumber(enableToken: EnableToken, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BearerToken>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.loginForPhoneNumber(enableToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApiApi.loginForPhoneNumber']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} customerDto 
         * @param {File} image 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async registerNewCustomer(customerDto: string, image: File, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseMessage>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.registerNewCustomer(customerDto, image, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApiApi.registerNewCustomer']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} registerInformations 
         * @param {File} image 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async registerNewWorkspace(registerInformations: string, image: File, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseMessage>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.registerNewWorkspace(registerInformations, image, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApiApi.registerNewWorkspace']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} phoneNumber 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendOtp(phoneNumber: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseMessage>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendOtp(phoneNumber, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApiApi.sendOtp']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} email 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendVerifyEmailToAdmin(email: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseMessage>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendVerifyEmailToAdmin(email, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApiApi.sendVerifyEmailToAdmin']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} businessDomain 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async workspaceExist(businessDomain: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.workspaceExist(businessDomain, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApiApi.workspaceExist']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} businessDomain 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async workspaceValid(businessDomain: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.workspaceValid(businessDomain, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApiApi.workspaceValid']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AuthApiApi - factory interface
 * @export
 */
export const AuthApiApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiApiFp(configuration)
    return {
        /**
         * 
         * @param {string} phoneNumber 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerValid(phoneNumber: string, options?: any): AxiosPromise<boolean> {
            return localVarFp.customerValid(phoneNumber, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {EnableToken} enableToken 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        enableAccountWithToken(enableToken: EnableToken, options?: any): AxiosPromise<ResponseMessage> {
            return localVarFp.enableAccountWithToken(enableToken, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {LoginDto} loginDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginForEmail(loginDto: LoginDto, options?: any): AxiosPromise<BearerToken> {
            return localVarFp.loginForEmail(loginDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {EnableToken} enableToken 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginForPhoneNumber(enableToken: EnableToken, options?: any): AxiosPromise<BearerToken> {
            return localVarFp.loginForPhoneNumber(enableToken, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} customerDto 
         * @param {File} image 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerNewCustomer(customerDto: string, image: File, options?: any): AxiosPromise<ResponseMessage> {
            return localVarFp.registerNewCustomer(customerDto, image, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} registerInformations 
         * @param {File} image 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerNewWorkspace(registerInformations: string, image: File, options?: any): AxiosPromise<ResponseMessage> {
            return localVarFp.registerNewWorkspace(registerInformations, image, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} phoneNumber 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendOtp(phoneNumber: string, options?: any): AxiosPromise<ResponseMessage> {
            return localVarFp.sendOtp(phoneNumber, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} email 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendVerifyEmailToAdmin(email: string, options?: any): AxiosPromise<ResponseMessage> {
            return localVarFp.sendVerifyEmailToAdmin(email, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} businessDomain 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workspaceExist(businessDomain: string, options?: any): AxiosPromise<boolean> {
            return localVarFp.workspaceExist(businessDomain, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} businessDomain 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workspaceValid(businessDomain: string, options?: any): AxiosPromise<boolean> {
            return localVarFp.workspaceValid(businessDomain, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthApiApi - object-oriented interface
 * @export
 * @class AuthApiApi
 * @extends {BaseAPI}
 */
export class AuthApiApi extends BaseAPI {
    /**
     * 
     * @param {string} phoneNumber 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiApi
     */
    public customerValid(phoneNumber: string, options?: RawAxiosRequestConfig) {
        return AuthApiApiFp(this.configuration).customerValid(phoneNumber, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {EnableToken} enableToken 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiApi
     */
    public enableAccountWithToken(enableToken: EnableToken, options?: RawAxiosRequestConfig) {
        return AuthApiApiFp(this.configuration).enableAccountWithToken(enableToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {LoginDto} loginDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiApi
     */
    public loginForEmail(loginDto: LoginDto, options?: RawAxiosRequestConfig) {
        return AuthApiApiFp(this.configuration).loginForEmail(loginDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {EnableToken} enableToken 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiApi
     */
    public loginForPhoneNumber(enableToken: EnableToken, options?: RawAxiosRequestConfig) {
        return AuthApiApiFp(this.configuration).loginForPhoneNumber(enableToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} customerDto 
     * @param {File} image 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiApi
     */
    public registerNewCustomer(customerDto: string, image: File, options?: RawAxiosRequestConfig) {
        return AuthApiApiFp(this.configuration).registerNewCustomer(customerDto, image, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} registerInformations 
     * @param {File} image 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiApi
     */
    public registerNewWorkspace(registerInformations: string, image: File, options?: RawAxiosRequestConfig) {
        return AuthApiApiFp(this.configuration).registerNewWorkspace(registerInformations, image, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} phoneNumber 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiApi
     */
    public sendOtp(phoneNumber: string, options?: RawAxiosRequestConfig) {
        return AuthApiApiFp(this.configuration).sendOtp(phoneNumber, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} email 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiApi
     */
    public sendVerifyEmailToAdmin(email: string, options?: RawAxiosRequestConfig) {
        return AuthApiApiFp(this.configuration).sendVerifyEmailToAdmin(email, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} businessDomain 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiApi
     */
    public workspaceExist(businessDomain: string, options?: RawAxiosRequestConfig) {
        return AuthApiApiFp(this.configuration).workspaceExist(businessDomain, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} businessDomain 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiApi
     */
    public workspaceValid(businessDomain: string, options?: RawAxiosRequestConfig) {
        return AuthApiApiFp(this.configuration).workspaceValid(businessDomain, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CategoryApiApi - axios parameter creator
 * @export
 */
export const CategoryApiApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {File} image 
         * @param {string} categoryTitle 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewCategory: async (image: File, categoryTitle: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'image' is not null or undefined
            assertParamExists('addNewCategory', 'image', image)
            // verify required parameter 'categoryTitle' is not null or undefined
            assertParamExists('addNewCategory', 'categoryTitle', categoryTitle)
            const localVarPath = `/api/v1/categories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (image !== undefined) { 
                localVarFormParams.append('image', image as any);
            }
    
            if (categoryTitle !== undefined) { 
                localVarFormParams.append('categoryTitle', categoryTitle as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} categoryTitle 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCategory: async (categoryTitle: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'categoryTitle' is not null or undefined
            assertParamExists('deleteCategory', 'categoryTitle', categoryTitle)
            const localVarPath = `/api/v1/categories/{categoryTitle}`
                .replace(`{${"categoryTitle"}}`, encodeURIComponent(String(categoryTitle)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllCategories: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/categories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllCategoriesForCustomer: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/categories/customer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CategoryApiApi - functional programming interface
 * @export
 */
export const CategoryApiApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CategoryApiApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {File} image 
         * @param {string} categoryTitle 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addNewCategory(image: File, categoryTitle: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CategoryDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addNewCategory(image, categoryTitle, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CategoryApiApi.addNewCategory']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} categoryTitle 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCategory(categoryTitle: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseMessage>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCategory(categoryTitle, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CategoryApiApi.deleteCategory']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllCategories(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CategoryDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllCategories(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CategoryApiApi.getAllCategories']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllCategoriesForCustomer(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CategoryDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllCategoriesForCustomer(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CategoryApiApi.getAllCategoriesForCustomer']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CategoryApiApi - factory interface
 * @export
 */
export const CategoryApiApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CategoryApiApiFp(configuration)
    return {
        /**
         * 
         * @param {File} image 
         * @param {string} categoryTitle 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewCategory(image: File, categoryTitle: string, options?: any): AxiosPromise<CategoryDto> {
            return localVarFp.addNewCategory(image, categoryTitle, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} categoryTitle 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCategory(categoryTitle: string, options?: any): AxiosPromise<ResponseMessage> {
            return localVarFp.deleteCategory(categoryTitle, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllCategories(options?: any): AxiosPromise<Array<CategoryDto>> {
            return localVarFp.getAllCategories(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllCategoriesForCustomer(options?: any): AxiosPromise<Array<CategoryDto>> {
            return localVarFp.getAllCategoriesForCustomer(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CategoryApiApi - object-oriented interface
 * @export
 * @class CategoryApiApi
 * @extends {BaseAPI}
 */
export class CategoryApiApi extends BaseAPI {
    /**
     * 
     * @param {File} image 
     * @param {string} categoryTitle 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryApiApi
     */
    public addNewCategory(image: File, categoryTitle: string, options?: RawAxiosRequestConfig) {
        return CategoryApiApiFp(this.configuration).addNewCategory(image, categoryTitle, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} categoryTitle 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryApiApi
     */
    public deleteCategory(categoryTitle: string, options?: RawAxiosRequestConfig) {
        return CategoryApiApiFp(this.configuration).deleteCategory(categoryTitle, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryApiApi
     */
    public getAllCategories(options?: RawAxiosRequestConfig) {
        return CategoryApiApiFp(this.configuration).getAllCategories(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryApiApi
     */
    public getAllCategoriesForCustomer(options?: RawAxiosRequestConfig) {
        return CategoryApiApiFp(this.configuration).getAllCategoriesForCustomer(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CustomTestApiApi - axios parameter creator
 * @export
 */
export const CustomTestApiApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomer: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/tests/customer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmail: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/tests/email`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHello: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/tests/test`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemUser: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/tests/systemUser`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendMail: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/tests/sendMail`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CustomTestApiApi - functional programming interface
 * @export
 */
export const CustomTestApiApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CustomTestApiApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCustomer(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<object>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCustomer(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomTestApiApi.getCustomer']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEmail(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RawEmailTemplate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEmail(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomTestApiApi.getEmail']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHello(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getHello(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomTestApiApi.getHello']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSystemUser(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<object>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSystemUser(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomTestApiApi.getSystemUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendMail(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendMail(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomTestApiApi.sendMail']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CustomTestApiApi - factory interface
 * @export
 */
export const CustomTestApiApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CustomTestApiApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomer(options?: any): AxiosPromise<Array<object>> {
            return localVarFp.getCustomer(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmail(options?: any): AxiosPromise<RawEmailTemplate> {
            return localVarFp.getEmail(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHello(options?: any): AxiosPromise<string> {
            return localVarFp.getHello(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemUser(options?: any): AxiosPromise<Array<object>> {
            return localVarFp.getSystemUser(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendMail(options?: any): AxiosPromise<void> {
            return localVarFp.sendMail(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CustomTestApiApi - object-oriented interface
 * @export
 * @class CustomTestApiApi
 * @extends {BaseAPI}
 */
export class CustomTestApiApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomTestApiApi
     */
    public getCustomer(options?: RawAxiosRequestConfig) {
        return CustomTestApiApiFp(this.configuration).getCustomer(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomTestApiApi
     */
    public getEmail(options?: RawAxiosRequestConfig) {
        return CustomTestApiApiFp(this.configuration).getEmail(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomTestApiApi
     */
    public getHello(options?: RawAxiosRequestConfig) {
        return CustomTestApiApiFp(this.configuration).getHello(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomTestApiApi
     */
    public getSystemUser(options?: RawAxiosRequestConfig) {
        return CustomTestApiApiFp(this.configuration).getSystemUser(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomTestApiApi
     */
    public sendMail(options?: RawAxiosRequestConfig) {
        return CustomTestApiApiFp(this.configuration).sendMail(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CustomerApiApi - axios parameter creator
 * @export
 */
export const CustomerApiApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser1: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/customers/token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CustomerApiApi - functional programming interface
 * @export
 */
export const CustomerApiApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CustomerApiApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUser1(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUser1(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomerApiApi.getUser1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CustomerApiApi - factory interface
 * @export
 */
export const CustomerApiApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CustomerApiApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser1(options?: any): AxiosPromise<CustomerDto> {
            return localVarFp.getUser1(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CustomerApiApi - object-oriented interface
 * @export
 * @class CustomerApiApi
 * @extends {BaseAPI}
 */
export class CustomerApiApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApiApi
     */
    public getUser1(options?: RawAxiosRequestConfig) {
        return CustomerApiApiFp(this.configuration).getUser1(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * FeaturedGroupsApiApi - axios parameter creator
 * @export
 */
export const FeaturedGroupsApiApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {FeaturedGroupsDto} featuredGroupsDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewFeaturedProduct: async (featuredGroupsDto: FeaturedGroupsDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'featuredGroupsDto' is not null or undefined
            assertParamExists('addNewFeaturedProduct', 'featuredGroupsDto', featuredGroupsDto)
            const localVarPath = `/api/v1/featuredGroups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(featuredGroupsDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {FeaturedGroupsDto} featuredGroupsDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFeaturedGroup: async (featuredGroupsDto: FeaturedGroupsDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'featuredGroupsDto' is not null or undefined
            assertParamExists('deleteFeaturedGroup', 'featuredGroupsDto', featuredGroupsDto)
            const localVarPath = `/api/v1/featuredGroups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(featuredGroupsDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllFeaturedGroups: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/featuredGroups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllFeaturedGroupsForCustomer: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/featuredGroups/customer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FeaturedGroupsApiApi - functional programming interface
 * @export
 */
export const FeaturedGroupsApiApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FeaturedGroupsApiApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {FeaturedGroupsDto} featuredGroupsDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addNewFeaturedProduct(featuredGroupsDto: FeaturedGroupsDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeaturedGroupsDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addNewFeaturedProduct(featuredGroupsDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FeaturedGroupsApiApi.addNewFeaturedProduct']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {FeaturedGroupsDto} featuredGroupsDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteFeaturedGroup(featuredGroupsDto: FeaturedGroupsDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseMessage>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteFeaturedGroup(featuredGroupsDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FeaturedGroupsApiApi.deleteFeaturedGroup']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllFeaturedGroups(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FeaturedGroupsDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllFeaturedGroups(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FeaturedGroupsApiApi.getAllFeaturedGroups']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllFeaturedGroupsForCustomer(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FeaturedGroupsDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllFeaturedGroupsForCustomer(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FeaturedGroupsApiApi.getAllFeaturedGroupsForCustomer']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * FeaturedGroupsApiApi - factory interface
 * @export
 */
export const FeaturedGroupsApiApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FeaturedGroupsApiApiFp(configuration)
    return {
        /**
         * 
         * @param {FeaturedGroupsDto} featuredGroupsDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewFeaturedProduct(featuredGroupsDto: FeaturedGroupsDto, options?: any): AxiosPromise<FeaturedGroupsDto> {
            return localVarFp.addNewFeaturedProduct(featuredGroupsDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {FeaturedGroupsDto} featuredGroupsDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFeaturedGroup(featuredGroupsDto: FeaturedGroupsDto, options?: any): AxiosPromise<ResponseMessage> {
            return localVarFp.deleteFeaturedGroup(featuredGroupsDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllFeaturedGroups(options?: any): AxiosPromise<Array<FeaturedGroupsDto>> {
            return localVarFp.getAllFeaturedGroups(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllFeaturedGroupsForCustomer(options?: any): AxiosPromise<Array<FeaturedGroupsDto>> {
            return localVarFp.getAllFeaturedGroupsForCustomer(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FeaturedGroupsApiApi - object-oriented interface
 * @export
 * @class FeaturedGroupsApiApi
 * @extends {BaseAPI}
 */
export class FeaturedGroupsApiApi extends BaseAPI {
    /**
     * 
     * @param {FeaturedGroupsDto} featuredGroupsDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturedGroupsApiApi
     */
    public addNewFeaturedProduct(featuredGroupsDto: FeaturedGroupsDto, options?: RawAxiosRequestConfig) {
        return FeaturedGroupsApiApiFp(this.configuration).addNewFeaturedProduct(featuredGroupsDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {FeaturedGroupsDto} featuredGroupsDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturedGroupsApiApi
     */
    public deleteFeaturedGroup(featuredGroupsDto: FeaturedGroupsDto, options?: RawAxiosRequestConfig) {
        return FeaturedGroupsApiApiFp(this.configuration).deleteFeaturedGroup(featuredGroupsDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturedGroupsApiApi
     */
    public getAllFeaturedGroups(options?: RawAxiosRequestConfig) {
        return FeaturedGroupsApiApiFp(this.configuration).getAllFeaturedGroups(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturedGroupsApiApi
     */
    public getAllFeaturedGroupsForCustomer(options?: RawAxiosRequestConfig) {
        return FeaturedGroupsApiApiFp(this.configuration).getAllFeaturedGroupsForCustomer(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ImageApiApi - axios parameter creator
 * @export
 */
export const ImageApiApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete: async (name: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('_delete', 'name', name)
            const localVarPath = `/api/v1/images`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} name 
         * @param {CreateRequest} [createRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create: async (name: string, createRequest?: CreateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('create', 'name', name)
            const localVarPath = `/api/v1/images`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ImageApiApi - functional programming interface
 * @export
 */
export const ImageApiApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ImageApiApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async _delete(name: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator._delete(name, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ImageApiApi._delete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} name 
         * @param {CreateRequest} [createRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async create(name: string, createRequest?: CreateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.create(name, createRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ImageApiApi.create']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ImageApiApi - factory interface
 * @export
 */
export const ImageApiApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ImageApiApiFp(configuration)
    return {
        /**
         * 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete(name: string, options?: any): AxiosPromise<string> {
            return localVarFp._delete(name, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} name 
         * @param {CreateRequest} [createRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(name: string, createRequest?: CreateRequest, options?: any): AxiosPromise<string> {
            return localVarFp.create(name, createRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ImageApiApi - object-oriented interface
 * @export
 * @class ImageApiApi
 * @extends {BaseAPI}
 */
export class ImageApiApi extends BaseAPI {
    /**
     * 
     * @param {string} name 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApiApi
     */
    public _delete(name: string, options?: RawAxiosRequestConfig) {
        return ImageApiApiFp(this.configuration)._delete(name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} name 
     * @param {CreateRequest} [createRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApiApi
     */
    public create(name: string, createRequest?: CreateRequest, options?: RawAxiosRequestConfig) {
        return ImageApiApiFp(this.configuration).create(name, createRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ProductApiApi - axios parameter creator
 * @export
 */
export const ProductApiApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} productInformations 
         * @param {File} image 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewProduct: async (productInformations: string, image: File, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productInformations' is not null or undefined
            assertParamExists('addNewProduct', 'productInformations', productInformations)
            // verify required parameter 'image' is not null or undefined
            assertParamExists('addNewProduct', 'image', image)
            const localVarPath = `/api/v1/products`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (productInformations !== undefined) { 
                localVarFormParams.append('productInformations', productInformations as any);
            }
    
            if (image !== undefined) { 
                localVarFormParams.append('image', image as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} productName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProduct: async (productName: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productName' is not null or undefined
            assertParamExists('deleteProduct', 'productName', productName)
            const localVarPath = `/api/v1/products/{productName}`
                .replace(`{${"productName"}}`, encodeURIComponent(String(productName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllProducts: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/products`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllProductsForCustomer: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/products/customer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductApiApi - functional programming interface
 * @export
 */
export const ProductApiApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductApiApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} productInformations 
         * @param {File} image 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addNewProduct(productInformations: string, image: File, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseMessage>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addNewProduct(productInformations, image, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProductApiApi.addNewProduct']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} productName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteProduct(productName: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseMessage>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteProduct(productName, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProductApiApi.deleteProduct']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllProducts(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProductDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllProducts(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProductApiApi.getAllProducts']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllProductsForCustomer(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProductDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllProductsForCustomer(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProductApiApi.getAllProductsForCustomer']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ProductApiApi - factory interface
 * @export
 */
export const ProductApiApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductApiApiFp(configuration)
    return {
        /**
         * 
         * @param {string} productInformations 
         * @param {File} image 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewProduct(productInformations: string, image: File, options?: any): AxiosPromise<ResponseMessage> {
            return localVarFp.addNewProduct(productInformations, image, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} productName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProduct(productName: string, options?: any): AxiosPromise<ResponseMessage> {
            return localVarFp.deleteProduct(productName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllProducts(options?: any): AxiosPromise<Array<ProductDto>> {
            return localVarFp.getAllProducts(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllProductsForCustomer(options?: any): AxiosPromise<Array<ProductDto>> {
            return localVarFp.getAllProductsForCustomer(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProductApiApi - object-oriented interface
 * @export
 * @class ProductApiApi
 * @extends {BaseAPI}
 */
export class ProductApiApi extends BaseAPI {
    /**
     * 
     * @param {string} productInformations 
     * @param {File} image 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApiApi
     */
    public addNewProduct(productInformations: string, image: File, options?: RawAxiosRequestConfig) {
        return ProductApiApiFp(this.configuration).addNewProduct(productInformations, image, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} productName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApiApi
     */
    public deleteProduct(productName: string, options?: RawAxiosRequestConfig) {
        return ProductApiApiFp(this.configuration).deleteProduct(productName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApiApi
     */
    public getAllProducts(options?: RawAxiosRequestConfig) {
        return ProductApiApiFp(this.configuration).getAllProducts(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApiApi
     */
    public getAllProductsForCustomer(options?: RawAxiosRequestConfig) {
        return ProductApiApiFp(this.configuration).getAllProductsForCustomer(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * StaffApiApi - axios parameter creator
 * @export
 */
export const StaffApiApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {SystemUserDto} systemUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewStaff: async (systemUserDto: SystemUserDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'systemUserDto' is not null or undefined
            assertParamExists('addNewStaff', 'systemUserDto', systemUserDto)
            const localVarPath = `/api/v1/staffs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(systemUserDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} email 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteStaff: async (email: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            assertParamExists('deleteStaff', 'email', email)
            const localVarPath = `/api/v1/staffs/{email}`
                .replace(`{${"email"}}`, encodeURIComponent(String(email)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllStaffsExceptAdmin: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/staffs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} userType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStaffByRole: async (userType: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userType' is not null or undefined
            assertParamExists('getStaffByRole', 'userType', userType)
            const localVarPath = `/api/v1/staffs/getByType`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (userType !== undefined) {
                localVarQueryParameter['userType'] = userType;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} email 
         * @param {SystemUserDto} systemUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateStaff: async (email: string, systemUserDto: SystemUserDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            assertParamExists('updateStaff', 'email', email)
            // verify required parameter 'systemUserDto' is not null or undefined
            assertParamExists('updateStaff', 'systemUserDto', systemUserDto)
            const localVarPath = `/api/v1/staffs/{email}`
                .replace(`{${"email"}}`, encodeURIComponent(String(email)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(systemUserDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StaffApiApi - functional programming interface
 * @export
 */
export const StaffApiApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = StaffApiApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {SystemUserDto} systemUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addNewStaff(systemUserDto: SystemUserDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SystemUserDtoResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addNewStaff(systemUserDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StaffApiApi.addNewStaff']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} email 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteStaff(email: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseMessage>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteStaff(email, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StaffApiApi.deleteStaff']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllStaffsExceptAdmin(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SystemUserDtoResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllStaffsExceptAdmin(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StaffApiApi.getAllStaffsExceptAdmin']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} userType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStaffByRole(userType: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SystemUserDtoResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getStaffByRole(userType, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StaffApiApi.getStaffByRole']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} email 
         * @param {SystemUserDto} systemUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateStaff(email: string, systemUserDto: SystemUserDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SystemUserDtoResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateStaff(email, systemUserDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StaffApiApi.updateStaff']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * StaffApiApi - factory interface
 * @export
 */
export const StaffApiApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = StaffApiApiFp(configuration)
    return {
        /**
         * 
         * @param {SystemUserDto} systemUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewStaff(systemUserDto: SystemUserDto, options?: any): AxiosPromise<SystemUserDtoResponse> {
            return localVarFp.addNewStaff(systemUserDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} email 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteStaff(email: string, options?: any): AxiosPromise<ResponseMessage> {
            return localVarFp.deleteStaff(email, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllStaffsExceptAdmin(options?: any): AxiosPromise<Array<SystemUserDtoResponse>> {
            return localVarFp.getAllStaffsExceptAdmin(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} userType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStaffByRole(userType: string, options?: any): AxiosPromise<Array<SystemUserDtoResponse>> {
            return localVarFp.getStaffByRole(userType, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} email 
         * @param {SystemUserDto} systemUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateStaff(email: string, systemUserDto: SystemUserDto, options?: any): AxiosPromise<SystemUserDtoResponse> {
            return localVarFp.updateStaff(email, systemUserDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * StaffApiApi - object-oriented interface
 * @export
 * @class StaffApiApi
 * @extends {BaseAPI}
 */
export class StaffApiApi extends BaseAPI {
    /**
     * 
     * @param {SystemUserDto} systemUserDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StaffApiApi
     */
    public addNewStaff(systemUserDto: SystemUserDto, options?: RawAxiosRequestConfig) {
        return StaffApiApiFp(this.configuration).addNewStaff(systemUserDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} email 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StaffApiApi
     */
    public deleteStaff(email: string, options?: RawAxiosRequestConfig) {
        return StaffApiApiFp(this.configuration).deleteStaff(email, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StaffApiApi
     */
    public getAllStaffsExceptAdmin(options?: RawAxiosRequestConfig) {
        return StaffApiApiFp(this.configuration).getAllStaffsExceptAdmin(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} userType 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StaffApiApi
     */
    public getStaffByRole(userType: string, options?: RawAxiosRequestConfig) {
        return StaffApiApiFp(this.configuration).getStaffByRole(userType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} email 
     * @param {SystemUserDto} systemUserDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StaffApiApi
     */
    public updateStaff(email: string, systemUserDto: SystemUserDto, options?: RawAxiosRequestConfig) {
        return StaffApiApiFp(this.configuration).updateStaff(email, systemUserDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UserApiApi - axios parameter creator
 * @export
 */
export const UserApiApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} businessDomain 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser: async (businessDomain: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'businessDomain' is not null or undefined
            assertParamExists('getUser', 'businessDomain', businessDomain)
            const localVarPath = `/api/v1/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (businessDomain !== undefined) {
                localVarQueryParameter['businessDomain'] = businessDomain;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApiApi - functional programming interface
 * @export
 */
export const UserApiApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserApiApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} businessDomain 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUser(businessDomain: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SystemUserDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUser(businessDomain, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApiApi.getUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UserApiApi - factory interface
 * @export
 */
export const UserApiApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserApiApiFp(configuration)
    return {
        /**
         * 
         * @param {string} businessDomain 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser(businessDomain: string, options?: any): AxiosPromise<SystemUserDto> {
            return localVarFp.getUser(businessDomain, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserApiApi - object-oriented interface
 * @export
 * @class UserApiApi
 * @extends {BaseAPI}
 */
export class UserApiApi extends BaseAPI {
    /**
     * 
     * @param {string} businessDomain 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiApi
     */
    public getUser(businessDomain: string, options?: RawAxiosRequestConfig) {
        return UserApiApiFp(this.configuration).getUser(businessDomain, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * WorkspaceTableApiApi - axios parameter creator
 * @export
 */
export const WorkspaceTableApiApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} tableName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewTable: async (tableName: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tableName' is not null or undefined
            assertParamExists('addNewTable', 'tableName', tableName)
            const localVarPath = `/api/v1/tables`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (tableName !== undefined) {
                localVarQueryParameter['tableName'] = tableName;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} tableName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTable: async (tableName: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tableName' is not null or undefined
            assertParamExists('deleteTable', 'tableName', tableName)
            const localVarPath = `/api/v1/tables`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (tableName !== undefined) {
                localVarQueryParameter['tableName'] = tableName;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllTablesOfWorkspace: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/tables`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WorkspaceTableApiApi - functional programming interface
 * @export
 */
export const WorkspaceTableApiApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WorkspaceTableApiApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} tableName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addNewTable(tableName: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkspaceTableDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addNewTable(tableName, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkspaceTableApiApi.addNewTable']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} tableName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTable(tableName: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseMessage>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTable(tableName, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkspaceTableApiApi.deleteTable']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllTablesOfWorkspace(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WorkspaceTableDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllTablesOfWorkspace(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkspaceTableApiApi.getAllTablesOfWorkspace']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * WorkspaceTableApiApi - factory interface
 * @export
 */
export const WorkspaceTableApiApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WorkspaceTableApiApiFp(configuration)
    return {
        /**
         * 
         * @param {string} tableName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewTable(tableName: string, options?: any): AxiosPromise<WorkspaceTableDto> {
            return localVarFp.addNewTable(tableName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} tableName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTable(tableName: string, options?: any): AxiosPromise<ResponseMessage> {
            return localVarFp.deleteTable(tableName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllTablesOfWorkspace(options?: any): AxiosPromise<Array<WorkspaceTableDto>> {
            return localVarFp.getAllTablesOfWorkspace(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * WorkspaceTableApiApi - object-oriented interface
 * @export
 * @class WorkspaceTableApiApi
 * @extends {BaseAPI}
 */
export class WorkspaceTableApiApi extends BaseAPI {
    /**
     * 
     * @param {string} tableName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceTableApiApi
     */
    public addNewTable(tableName: string, options?: RawAxiosRequestConfig) {
        return WorkspaceTableApiApiFp(this.configuration).addNewTable(tableName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} tableName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceTableApiApi
     */
    public deleteTable(tableName: string, options?: RawAxiosRequestConfig) {
        return WorkspaceTableApiApiFp(this.configuration).deleteTable(tableName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceTableApiApi
     */
    public getAllTablesOfWorkspace(options?: RawAxiosRequestConfig) {
        return WorkspaceTableApiApiFp(this.configuration).getAllTablesOfWorkspace(options).then((request) => request(this.axios, this.basePath));
    }
}



