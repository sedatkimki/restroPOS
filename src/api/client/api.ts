/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface Admin
 */
export interface Admin {
    /**
     * 
     * @type {number}
     * @memberof Admin
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Admin
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof Admin
     */
    'password': string;
    /**
     * 
     * @type {Role}
     * @memberof Admin
     */
    'role'?: Role;
    /**
     * 
     * @type {string}
     * @memberof Admin
     */
    'firstName': string;
    /**
     * 
     * @type {string}
     * @memberof Admin
     */
    'lastName': string;
    /**
     * 
     * @type {boolean}
     * @memberof Admin
     */
    'loginDisabled'?: boolean;
    /**
     * 
     * @type {Workspace}
     * @memberof Admin
     */
    'workspace'?: Workspace;
}
/**
 * 
 * @export
 * @interface BasicUser
 */
export interface BasicUser {
    /**
     * 
     * @type {number}
     * @memberof BasicUser
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof BasicUser
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof BasicUser
     */
    'password': string;
    /**
     * 
     * @type {Role}
     * @memberof BasicUser
     */
    'role'?: Role;
    /**
     * 
     * @type {string}
     * @memberof BasicUser
     */
    'deviceName': string;
    /**
     * 
     * @type {Workspace}
     * @memberof BasicUser
     */
    'workspace'?: Workspace;
}
/**
 * 
 * @export
 * @interface CashDesk
 */
export interface CashDesk {
    /**
     * 
     * @type {number}
     * @memberof CashDesk
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof CashDesk
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof CashDesk
     */
    'password': string;
    /**
     * 
     * @type {Role}
     * @memberof CashDesk
     */
    'role'?: Role;
    /**
     * 
     * @type {string}
     * @memberof CashDesk
     */
    'deviceName': string;
    /**
     * 
     * @type {Workspace}
     * @memberof CashDesk
     */
    'workspace'?: Workspace;
}
/**
 * 
 * @export
 * @interface Customer
 */
export interface Customer {
    /**
     * 
     * @type {number}
     * @memberof Customer
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Customer
     */
    'firstName': string;
    /**
     * 
     * @type {string}
     * @memberof Customer
     */
    'lastName': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof Customer
     */
    'profilePhoto'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof Customer
     */
    'phoneNumber'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Customer
     */
    'loginDisabled'?: boolean;
}
/**
 * 
 * @export
 * @interface CustomerDto
 */
export interface CustomerDto {
    /**
     * 
     * @type {string}
     * @memberof CustomerDto
     */
    'firstName': string;
    /**
     * 
     * @type {string}
     * @memberof CustomerDto
     */
    'lastName': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof CustomerDto
     */
    'profilePhoto'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof CustomerDto
     */
    'phoneNumber': string;
}
/**
 * 
 * @export
 * @interface EnableToken
 */
export interface EnableToken {
    /**
     * 
     * @type {string}
     * @memberof EnableToken
     */
    'tokenCode': string;
    /**
     * 
     * @type {string}
     * @memberof EnableToken
     */
    'accountInformation': string;
}
/**
 * 
 * @export
 * @interface Kitchen
 */
export interface Kitchen {
    /**
     * 
     * @type {number}
     * @memberof Kitchen
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Kitchen
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof Kitchen
     */
    'password': string;
    /**
     * 
     * @type {Role}
     * @memberof Kitchen
     */
    'role'?: Role;
    /**
     * 
     * @type {string}
     * @memberof Kitchen
     */
    'deviceName': string;
    /**
     * 
     * @type {Workspace}
     * @memberof Kitchen
     */
    'workspace'?: Workspace;
}
/**
 * 
 * @export
 * @interface LoginDto
 */
export interface LoginDto {
    /**
     * 
     * @type {string}
     * @memberof LoginDto
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof LoginDto
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface OtpResponseDto
 */
export interface OtpResponseDto {
    /**
     * 
     * @type {string}
     * @memberof OtpResponseDto
     */
    'status'?: OtpResponseDtoStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof OtpResponseDto
     */
    'message'?: string;
}

export const OtpResponseDtoStatusEnum = {
    Delivered: 'DELIVERED',
    Failed: 'FAILED'
} as const;

export type OtpResponseDtoStatusEnum = typeof OtpResponseDtoStatusEnum[keyof typeof OtpResponseDtoStatusEnum];

/**
 * 
 * @export
 * @interface RawEmailTemplate
 */
export interface RawEmailTemplate {
    /**
     * 
     * @type {string}
     * @memberof RawEmailTemplate
     */
    'templateName'?: RawEmailTemplateTemplateNameEnum;
    /**
     * 
     * @type {string}
     * @memberof RawEmailTemplate
     */
    'templateContent'?: string;
}

export const RawEmailTemplateTemplateNameEnum = {
    WorkspaceVerifyTemplate: 'WORKSPACE_VERIFY_TEMPLATE'
} as const;

export type RawEmailTemplateTemplateNameEnum = typeof RawEmailTemplateTemplateNameEnum[keyof typeof RawEmailTemplateTemplateNameEnum];

/**
 * 
 * @export
 * @interface RegisterDto
 */
export interface RegisterDto {
    /**
     * 
     * @type {SystemUserDto}
     * @memberof RegisterDto
     */
    'systemUser'?: SystemUserDto;
    /**
     * 
     * @type {WorkspaceDto}
     * @memberof RegisterDto
     */
    'workspace'?: WorkspaceDto;
}
/**
 * 
 * @export
 * @interface ResponseMessage
 */
export interface ResponseMessage {
    /**
     * 
     * @type {string}
     * @memberof ResponseMessage
     */
    'status'?: ResponseMessageStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof ResponseMessage
     */
    'message'?: string;
}

export const ResponseMessageStatusEnum = {
    _100Continue: '100 CONTINUE',
    _101SwitchingProtocols: '101 SWITCHING_PROTOCOLS',
    _102Processing: '102 PROCESSING',
    _103EarlyHints: '103 EARLY_HINTS',
    _103Checkpoint: '103 CHECKPOINT',
    _200Ok: '200 OK',
    _201Created: '201 CREATED',
    _202Accepted: '202 ACCEPTED',
    _203NonAuthoritativeInformation: '203 NON_AUTHORITATIVE_INFORMATION',
    _204NoContent: '204 NO_CONTENT',
    _205ResetContent: '205 RESET_CONTENT',
    _206PartialContent: '206 PARTIAL_CONTENT',
    _207MultiStatus: '207 MULTI_STATUS',
    _208AlreadyReported: '208 ALREADY_REPORTED',
    _226ImUsed: '226 IM_USED',
    _300MultipleChoices: '300 MULTIPLE_CHOICES',
    _301MovedPermanently: '301 MOVED_PERMANENTLY',
    _302Found: '302 FOUND',
    _302MovedTemporarily: '302 MOVED_TEMPORARILY',
    _303SeeOther: '303 SEE_OTHER',
    _304NotModified: '304 NOT_MODIFIED',
    _305UseProxy: '305 USE_PROXY',
    _307TemporaryRedirect: '307 TEMPORARY_REDIRECT',
    _308PermanentRedirect: '308 PERMANENT_REDIRECT',
    _400BadRequest: '400 BAD_REQUEST',
    _401Unauthorized: '401 UNAUTHORIZED',
    _402PaymentRequired: '402 PAYMENT_REQUIRED',
    _403Forbidden: '403 FORBIDDEN',
    _404NotFound: '404 NOT_FOUND',
    _405MethodNotAllowed: '405 METHOD_NOT_ALLOWED',
    _406NotAcceptable: '406 NOT_ACCEPTABLE',
    _407ProxyAuthenticationRequired: '407 PROXY_AUTHENTICATION_REQUIRED',
    _408RequestTimeout: '408 REQUEST_TIMEOUT',
    _409Conflict: '409 CONFLICT',
    _410Gone: '410 GONE',
    _411LengthRequired: '411 LENGTH_REQUIRED',
    _412PreconditionFailed: '412 PRECONDITION_FAILED',
    _413PayloadTooLarge: '413 PAYLOAD_TOO_LARGE',
    _413RequestEntityTooLarge: '413 REQUEST_ENTITY_TOO_LARGE',
    _414UriTooLong: '414 URI_TOO_LONG',
    _414RequestUriTooLong: '414 REQUEST_URI_TOO_LONG',
    _415UnsupportedMediaType: '415 UNSUPPORTED_MEDIA_TYPE',
    _416RequestedRangeNotSatisfiable: '416 REQUESTED_RANGE_NOT_SATISFIABLE',
    _417ExpectationFailed: '417 EXPECTATION_FAILED',
    _418IAmATeapot: '418 I_AM_A_TEAPOT',
    _419InsufficientSpaceOnResource: '419 INSUFFICIENT_SPACE_ON_RESOURCE',
    _420MethodFailure: '420 METHOD_FAILURE',
    _421DestinationLocked: '421 DESTINATION_LOCKED',
    _422UnprocessableEntity: '422 UNPROCESSABLE_ENTITY',
    _423Locked: '423 LOCKED',
    _424FailedDependency: '424 FAILED_DEPENDENCY',
    _425TooEarly: '425 TOO_EARLY',
    _426UpgradeRequired: '426 UPGRADE_REQUIRED',
    _428PreconditionRequired: '428 PRECONDITION_REQUIRED',
    _429TooManyRequests: '429 TOO_MANY_REQUESTS',
    _431RequestHeaderFieldsTooLarge: '431 REQUEST_HEADER_FIELDS_TOO_LARGE',
    _451UnavailableForLegalReasons: '451 UNAVAILABLE_FOR_LEGAL_REASONS',
    _500InternalServerError: '500 INTERNAL_SERVER_ERROR',
    _501NotImplemented: '501 NOT_IMPLEMENTED',
    _502BadGateway: '502 BAD_GATEWAY',
    _503ServiceUnavailable: '503 SERVICE_UNAVAILABLE',
    _504GatewayTimeout: '504 GATEWAY_TIMEOUT',
    _505HttpVersionNotSupported: '505 HTTP_VERSION_NOT_SUPPORTED',
    _506VariantAlsoNegotiates: '506 VARIANT_ALSO_NEGOTIATES',
    _507InsufficientStorage: '507 INSUFFICIENT_STORAGE',
    _508LoopDetected: '508 LOOP_DETECTED',
    _509BandwidthLimitExceeded: '509 BANDWIDTH_LIMIT_EXCEEDED',
    _510NotExtended: '510 NOT_EXTENDED',
    _511NetworkAuthenticationRequired: '511 NETWORK_AUTHENTICATION_REQUIRED'
} as const;

export type ResponseMessageStatusEnum = typeof ResponseMessageStatusEnum[keyof typeof ResponseMessageStatusEnum];

/**
 * 
 * @export
 * @interface Role
 */
export interface Role {
    /**
     * 
     * @type {string}
     * @memberof Role
     */
    'roleName': string;
}
/**
 * 
 * @export
 * @interface SystemUser
 */
export interface SystemUser {
    /**
     * 
     * @type {number}
     * @memberof SystemUser
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof SystemUser
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof SystemUser
     */
    'password': string;
    /**
     * 
     * @type {Role}
     * @memberof SystemUser
     */
    'role'?: Role;
    /**
     * 
     * @type {string}
     * @memberof SystemUser
     */
    'firstName': string;
    /**
     * 
     * @type {string}
     * @memberof SystemUser
     */
    'lastName': string;
    /**
     * 
     * @type {boolean}
     * @memberof SystemUser
     */
    'loginDisabled'?: boolean;
    /**
     * 
     * @type {Workspace}
     * @memberof SystemUser
     */
    'workspace'?: Workspace;
}
/**
 * 
 * @export
 * @interface SystemUserDto
 */
export interface SystemUserDto {
    /**
     * 
     * @type {string}
     * @memberof SystemUserDto
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof SystemUserDto
     */
    'password': string;
    /**
     * 
     * @type {string}
     * @memberof SystemUserDto
     */
    'firstName': string;
    /**
     * 
     * @type {string}
     * @memberof SystemUserDto
     */
    'lastName': string;
}
/**
 * 
 * @export
 * @interface Waiter
 */
export interface Waiter {
    /**
     * 
     * @type {number}
     * @memberof Waiter
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Waiter
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof Waiter
     */
    'password': string;
    /**
     * 
     * @type {Role}
     * @memberof Waiter
     */
    'role'?: Role;
    /**
     * 
     * @type {string}
     * @memberof Waiter
     */
    'firstName': string;
    /**
     * 
     * @type {string}
     * @memberof Waiter
     */
    'lastName': string;
    /**
     * 
     * @type {boolean}
     * @memberof Waiter
     */
    'loginDisabled'?: boolean;
    /**
     * 
     * @type {Workspace}
     * @memberof Waiter
     */
    'workspace'?: Workspace;
}
/**
 * 
 * @export
 * @interface Workspace
 */
export interface Workspace {
    /**
     * 
     * @type {string}
     * @memberof Workspace
     */
    'businessDomain'?: string;
    /**
     * 
     * @type {string}
     * @memberof Workspace
     */
    'businessName'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof Workspace
     */
    'businessLogo'?: Array<string>;
    /**
     * 
     * @type {Array<BasicUser>}
     * @memberof Workspace
     */
    'basicUsers'?: Array<BasicUser>;
    /**
     * 
     * @type {Array<SystemUser>}
     * @memberof Workspace
     */
    'systemUsers'?: Array<SystemUser>;
}
/**
 * 
 * @export
 * @interface WorkspaceDto
 */
export interface WorkspaceDto {
    /**
     * 
     * @type {string}
     * @memberof WorkspaceDto
     */
    'businessName': string;
    /**
     * 
     * @type {string}
     * @memberof WorkspaceDto
     */
    'businessDomain': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof WorkspaceDto
     */
    'businessLogo'?: Array<string>;
}

/**
 * AuthApiApi - axios parameter creator
 * @export
 */
export const AuthApiApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} phoneNumber 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerValid: async (phoneNumber: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'phoneNumber' is not null or undefined
            assertParamExists('customerValid', 'phoneNumber', phoneNumber)
            const localVarPath = `/auth/customer/valid`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (phoneNumber !== undefined) {
                localVarQueryParameter['phoneNumber'] = phoneNumber;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {EnableToken} enableToken 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        enableAccountWithToken: async (enableToken: EnableToken, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'enableToken' is not null or undefined
            assertParamExists('enableAccountWithToken', 'enableToken', enableToken)
            const localVarPath = `/auth/account/enable`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(enableToken, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {LoginDto} loginDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginForEmail: async (loginDto: LoginDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'loginDto' is not null or undefined
            assertParamExists('loginForEmail', 'loginDto', loginDto)
            const localVarPath = `/auth/login/email`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {EnableToken} enableToken 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginForPhoneNumber: async (enableToken: EnableToken, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'enableToken' is not null or undefined
            assertParamExists('loginForPhoneNumber', 'enableToken', enableToken)
            const localVarPath = `/auth/login/phoneNumber`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(enableToken, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CustomerDto} customerDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerNewCustomer: async (customerDto: CustomerDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerDto' is not null or undefined
            assertParamExists('registerNewCustomer', 'customerDto', customerDto)
            const localVarPath = `/auth/customer/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(customerDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RegisterDto} registerDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerNewWorkspace: async (registerDto: RegisterDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'registerDto' is not null or undefined
            assertParamExists('registerNewWorkspace', 'registerDto', registerDto)
            const localVarPath = `/auth/workspace/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(registerDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} phoneNumber 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendOtp: async (phoneNumber: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'phoneNumber' is not null or undefined
            assertParamExists('sendOtp', 'phoneNumber', phoneNumber)
            const localVarPath = `/auth/sendVerifySms`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (phoneNumber !== undefined) {
                localVarQueryParameter['phoneNumber'] = phoneNumber;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} email 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendVerifyEmailToAdmin: async (email: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            assertParamExists('sendVerifyEmailToAdmin', 'email', email)
            const localVarPath = `/auth/sendVerifyEmail`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} businessDomain 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workspaceValid: async (businessDomain: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'businessDomain' is not null or undefined
            assertParamExists('workspaceValid', 'businessDomain', businessDomain)
            const localVarPath = `/auth/workspace/valid`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (businessDomain !== undefined) {
                localVarQueryParameter['businessDomain'] = businessDomain;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApiApi - functional programming interface
 * @export
 */
export const AuthApiApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} phoneNumber 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customerValid(phoneNumber: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customerValid(phoneNumber, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApiApi.customerValid']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {EnableToken} enableToken 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async enableAccountWithToken(enableToken: EnableToken, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseMessage>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.enableAccountWithToken(enableToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApiApi.enableAccountWithToken']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {LoginDto} loginDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loginForEmail(loginDto: LoginDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.loginForEmail(loginDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApiApi.loginForEmail']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {EnableToken} enableToken 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loginForPhoneNumber(enableToken: EnableToken, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.loginForPhoneNumber(enableToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApiApi.loginForPhoneNumber']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CustomerDto} customerDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async registerNewCustomer(customerDto: CustomerDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseMessage>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.registerNewCustomer(customerDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApiApi.registerNewCustomer']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {RegisterDto} registerDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async registerNewWorkspace(registerDto: RegisterDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseMessage>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.registerNewWorkspace(registerDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApiApi.registerNewWorkspace']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} phoneNumber 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendOtp(phoneNumber: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OtpResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendOtp(phoneNumber, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApiApi.sendOtp']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} email 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendVerifyEmailToAdmin(email: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseMessage>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendVerifyEmailToAdmin(email, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApiApi.sendVerifyEmailToAdmin']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} businessDomain 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async workspaceValid(businessDomain: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.workspaceValid(businessDomain, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApiApi.workspaceValid']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AuthApiApi - factory interface
 * @export
 */
export const AuthApiApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiApiFp(configuration)
    return {
        /**
         * 
         * @param {string} phoneNumber 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customerValid(phoneNumber: string, options?: any): AxiosPromise<boolean> {
            return localVarFp.customerValid(phoneNumber, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {EnableToken} enableToken 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        enableAccountWithToken(enableToken: EnableToken, options?: any): AxiosPromise<ResponseMessage> {
            return localVarFp.enableAccountWithToken(enableToken, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {LoginDto} loginDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginForEmail(loginDto: LoginDto, options?: any): AxiosPromise<object> {
            return localVarFp.loginForEmail(loginDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {EnableToken} enableToken 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginForPhoneNumber(enableToken: EnableToken, options?: any): AxiosPromise<object> {
            return localVarFp.loginForPhoneNumber(enableToken, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CustomerDto} customerDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerNewCustomer(customerDto: CustomerDto, options?: any): AxiosPromise<ResponseMessage> {
            return localVarFp.registerNewCustomer(customerDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RegisterDto} registerDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerNewWorkspace(registerDto: RegisterDto, options?: any): AxiosPromise<ResponseMessage> {
            return localVarFp.registerNewWorkspace(registerDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} phoneNumber 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendOtp(phoneNumber: string, options?: any): AxiosPromise<OtpResponseDto> {
            return localVarFp.sendOtp(phoneNumber, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} email 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendVerifyEmailToAdmin(email: string, options?: any): AxiosPromise<ResponseMessage> {
            return localVarFp.sendVerifyEmailToAdmin(email, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} businessDomain 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workspaceValid(businessDomain: string, options?: any): AxiosPromise<boolean> {
            return localVarFp.workspaceValid(businessDomain, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthApiApi - object-oriented interface
 * @export
 * @class AuthApiApi
 * @extends {BaseAPI}
 */
export class AuthApiApi extends BaseAPI {
    /**
     * 
     * @param {string} phoneNumber 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiApi
     */
    public customerValid(phoneNumber: string, options?: RawAxiosRequestConfig) {
        return AuthApiApiFp(this.configuration).customerValid(phoneNumber, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {EnableToken} enableToken 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiApi
     */
    public enableAccountWithToken(enableToken: EnableToken, options?: RawAxiosRequestConfig) {
        return AuthApiApiFp(this.configuration).enableAccountWithToken(enableToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {LoginDto} loginDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiApi
     */
    public loginForEmail(loginDto: LoginDto, options?: RawAxiosRequestConfig) {
        return AuthApiApiFp(this.configuration).loginForEmail(loginDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {EnableToken} enableToken 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiApi
     */
    public loginForPhoneNumber(enableToken: EnableToken, options?: RawAxiosRequestConfig) {
        return AuthApiApiFp(this.configuration).loginForPhoneNumber(enableToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CustomerDto} customerDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiApi
     */
    public registerNewCustomer(customerDto: CustomerDto, options?: RawAxiosRequestConfig) {
        return AuthApiApiFp(this.configuration).registerNewCustomer(customerDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {RegisterDto} registerDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiApi
     */
    public registerNewWorkspace(registerDto: RegisterDto, options?: RawAxiosRequestConfig) {
        return AuthApiApiFp(this.configuration).registerNewWorkspace(registerDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} phoneNumber 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiApi
     */
    public sendOtp(phoneNumber: string, options?: RawAxiosRequestConfig) {
        return AuthApiApiFp(this.configuration).sendOtp(phoneNumber, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} email 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiApi
     */
    public sendVerifyEmailToAdmin(email: string, options?: RawAxiosRequestConfig) {
        return AuthApiApiFp(this.configuration).sendVerifyEmailToAdmin(email, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} businessDomain 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiApi
     */
    public workspaceValid(businessDomain: string, options?: RawAxiosRequestConfig) {
        return AuthApiApiFp(this.configuration).workspaceValid(businessDomain, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CustomTestApiApi - axios parameter creator
 * @export
 */
export const CustomTestApiApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBasicUser: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/tests/basicUser`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomer: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/tests/customer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmail: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/tests/email`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHello: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/tests/test`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemUser: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/tests/systemUser`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendMail: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/tests/sendMail`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CustomTestApiApi - functional programming interface
 * @export
 */
export const CustomTestApiApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CustomTestApiApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBasicUser(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<object>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBasicUser(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomTestApiApi.getBasicUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCustomer(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<object>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCustomer(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomTestApiApi.getCustomer']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEmail(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RawEmailTemplate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEmail(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomTestApiApi.getEmail']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHello(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getHello(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomTestApiApi.getHello']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSystemUser(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<object>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSystemUser(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomTestApiApi.getSystemUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendMail(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendMail(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CustomTestApiApi.sendMail']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CustomTestApiApi - factory interface
 * @export
 */
export const CustomTestApiApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CustomTestApiApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBasicUser(options?: any): AxiosPromise<Array<object>> {
            return localVarFp.getBasicUser(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomer(options?: any): AxiosPromise<Array<object>> {
            return localVarFp.getCustomer(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmail(options?: any): AxiosPromise<RawEmailTemplate> {
            return localVarFp.getEmail(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHello(options?: any): AxiosPromise<string> {
            return localVarFp.getHello(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemUser(options?: any): AxiosPromise<Array<object>> {
            return localVarFp.getSystemUser(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendMail(options?: any): AxiosPromise<void> {
            return localVarFp.sendMail(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CustomTestApiApi - object-oriented interface
 * @export
 * @class CustomTestApiApi
 * @extends {BaseAPI}
 */
export class CustomTestApiApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomTestApiApi
     */
    public getBasicUser(options?: RawAxiosRequestConfig) {
        return CustomTestApiApiFp(this.configuration).getBasicUser(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomTestApiApi
     */
    public getCustomer(options?: RawAxiosRequestConfig) {
        return CustomTestApiApiFp(this.configuration).getCustomer(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomTestApiApi
     */
    public getEmail(options?: RawAxiosRequestConfig) {
        return CustomTestApiApiFp(this.configuration).getEmail(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomTestApiApi
     */
    public getHello(options?: RawAxiosRequestConfig) {
        return CustomTestApiApiFp(this.configuration).getHello(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomTestApiApi
     */
    public getSystemUser(options?: RawAxiosRequestConfig) {
        return CustomTestApiApiFp(this.configuration).getSystemUser(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomTestApiApi
     */
    public sendMail(options?: RawAxiosRequestConfig) {
        return CustomTestApiApiFp(this.configuration).sendMail(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UserApiApi - axios parameter creator
 * @export
 */
export const UserApiApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {Admin} admin 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewAdmin: async (admin: Admin, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'admin' is not null or undefined
            assertParamExists('addNewAdmin', 'admin', admin)
            const localVarPath = `/api/v1/users/admin`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(admin, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CashDesk} cashDesk 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewCashDesk: async (cashDesk: CashDesk, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cashDesk' is not null or undefined
            assertParamExists('addNewCashDesk', 'cashDesk', cashDesk)
            const localVarPath = `/api/v1/users/cashDesk`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(cashDesk, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Customer} customer 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewCustomer: async (customer: Customer, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customer' is not null or undefined
            assertParamExists('addNewCustomer', 'customer', customer)
            const localVarPath = `/api/v1/users/customer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(customer, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Kitchen} kitchen 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewKitchen: async (kitchen: Kitchen, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'kitchen' is not null or undefined
            assertParamExists('addNewKitchen', 'kitchen', kitchen)
            const localVarPath = `/api/v1/users/kitchen`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(kitchen, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Waiter} waiter 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewWaiter: async (waiter: Waiter, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'waiter' is not null or undefined
            assertParamExists('addNewWaiter', 'waiter', waiter)
            const localVarPath = `/api/v1/users/waiter`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(waiter, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApiApi - functional programming interface
 * @export
 */
export const UserApiApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserApiApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {Admin} admin 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addNewAdmin(admin: Admin, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addNewAdmin(admin, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApiApi.addNewAdmin']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CashDesk} cashDesk 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addNewCashDesk(cashDesk: CashDesk, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addNewCashDesk(cashDesk, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApiApi.addNewCashDesk']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {Customer} customer 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addNewCustomer(customer: Customer, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addNewCustomer(customer, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApiApi.addNewCustomer']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {Kitchen} kitchen 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addNewKitchen(kitchen: Kitchen, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addNewKitchen(kitchen, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApiApi.addNewKitchen']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {Waiter} waiter 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addNewWaiter(waiter: Waiter, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addNewWaiter(waiter, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApiApi.addNewWaiter']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UserApiApi - factory interface
 * @export
 */
export const UserApiApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserApiApiFp(configuration)
    return {
        /**
         * 
         * @param {Admin} admin 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewAdmin(admin: Admin, options?: any): AxiosPromise<object> {
            return localVarFp.addNewAdmin(admin, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CashDesk} cashDesk 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewCashDesk(cashDesk: CashDesk, options?: any): AxiosPromise<object> {
            return localVarFp.addNewCashDesk(cashDesk, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Customer} customer 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewCustomer(customer: Customer, options?: any): AxiosPromise<object> {
            return localVarFp.addNewCustomer(customer, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Kitchen} kitchen 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewKitchen(kitchen: Kitchen, options?: any): AxiosPromise<object> {
            return localVarFp.addNewKitchen(kitchen, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Waiter} waiter 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewWaiter(waiter: Waiter, options?: any): AxiosPromise<object> {
            return localVarFp.addNewWaiter(waiter, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserApiApi - object-oriented interface
 * @export
 * @class UserApiApi
 * @extends {BaseAPI}
 */
export class UserApiApi extends BaseAPI {
    /**
     * 
     * @param {Admin} admin 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiApi
     */
    public addNewAdmin(admin: Admin, options?: RawAxiosRequestConfig) {
        return UserApiApiFp(this.configuration).addNewAdmin(admin, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CashDesk} cashDesk 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiApi
     */
    public addNewCashDesk(cashDesk: CashDesk, options?: RawAxiosRequestConfig) {
        return UserApiApiFp(this.configuration).addNewCashDesk(cashDesk, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {Customer} customer 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiApi
     */
    public addNewCustomer(customer: Customer, options?: RawAxiosRequestConfig) {
        return UserApiApiFp(this.configuration).addNewCustomer(customer, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {Kitchen} kitchen 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiApi
     */
    public addNewKitchen(kitchen: Kitchen, options?: RawAxiosRequestConfig) {
        return UserApiApiFp(this.configuration).addNewKitchen(kitchen, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {Waiter} waiter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiApi
     */
    public addNewWaiter(waiter: Waiter, options?: RawAxiosRequestConfig) {
        return UserApiApiFp(this.configuration).addNewWaiter(waiter, options).then((request) => request(this.axios, this.basePath));
    }
}



